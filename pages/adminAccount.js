import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import unfLogo from '../public/UNF_Logo.gif'
import {useEffect, useState} from "react";
import Link from 'next/link'
import { server, withSessionSsr } from '../lib/withSession';
/*Reports Page
Shows unresolved reports
'http://localhost:3000/api/getAccounts'
*/





export const getServerSideProps = withSessionSsr(
    async ({req, res}) => {
        const user = req.session.user;

        if(!user || user.role != 'admin') {
            return {
                notFound: true,
            }
        }

        return {
            props: { user,  },
        }
    }
);




function exportTableToExcel(tableID, filename = ''){
  var downloadLink;
  var dataType = 'application/vnd.ms-excel';
  var tableSelect = document.getElementById(tableID);
  var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');
  
  // Specify file name
  filename = filename?filename+'.xls':'excel_data.xls';
  
  // Create download link element
  downloadLink = document.createElement("a");
  
  document.body.appendChild(downloadLink);
  
  if(navigator.msSaveOrOpenBlob){
      var blob = new Blob(['\ufeff', tableHTML], {
          type: dataType
      });
      navigator.msSaveOrOpenBlob( blob, filename);
  }else{
      // Create a link to the file
      downloadLink.href = 'data:' + dataType + ', ' + tableHTML;
  
      // Setting the file name
      downloadLink.download = filename;
      
      //triggering the function
      downloadLink.click();
  }
}
const AdministratorAccount = ({ user, faculty_list }) => {
const [query, setQuery] = useState("")
const [dataResponse, setdataResponse] = useState([]);


const [order, setOrder] = useState("ASC")
const sorting =(col)=>{
  if (order === "ASC") {
    const sorted = [...dataResponse].sort((a,b)=>
    a[col].toLowerCase() > b[col].toLowerCase() ? 1 : -1
    );
    setdataResponse(sorted);
    setOrder("DSC")
}

if (order === "DSC") {
  const sorted = [...dataResponse].sort((a,b)=>
  a[col].toLowerCase() < b[col].toLowerCase() ? 1 : -1
  );
  setdataResponse(sorted);
  setOrder("ASC")
};
}

const sortingInt =(col)=>{
  if (order === "ASC") {
    const sorted = [...dataResponse].sort((a,b)=>
    a[col] > b[col] ? 1 : -1
    );
    setdataResponse(sorted);
    setOrder("DSC")
}

if (order === "DSC") {
  const sorted = [...dataResponse].sort((a,b)=>
  a[col] < b[col] ? 1 : -1
  );
  setdataResponse(sorted);
  setOrder("ASC")
};
}





useEffect(() => {
  async function getPageData() {
    const response = await fetch('/api/get_accounts');
    const res = await response.json();
    console.log("Output:",res);
  setdataResponse(res.accounts);
  }

getPageData();
}, []);
  return (
<div>
      <Head>
        <title>AdminReports</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <header className={styles.header}>
                <Link href="/home">
                  <div>
                  <Image className={styles.image} src={unfLogo} alt="UNF"/>
                  </div>
                  </Link>
                <span className={styles.headerContent}>
                    {/* Removed old links, they were not needed for production */}
                    <button type="button" className={styles.headerButton}>Logout</button>
                </span>
            </header>
      
            <main>

                <nav className="navbar navbar-light bg-light">
  <div className="container-fluid">


    <Link href="/home">Home</Link>
    

    <form className="d-flex input-group w-auto">
      <input
        type="search"
        className="form-control rounded"
        placeholder="Search"
        aria-label="Search"
        aria-describedby="search-addon"
        data-table="reports-list"
        onChange={event => setQuery(event.target.value)}
      />
    </form>
    <div className="d-flex align-items-center">
        <button type="button" className={styles.approveButton} onClick={()=>exportTableToExcel("tableID")}>
          Export
        </button>
      </div>
  </div>
</nav>
     



                <table className="table table-hover table-bordered" id="tableID">
                   <thead className="thead-light">
                     <tr>
                       <th onClick={()=>sortingInt("account_id")}className={styles.container}>Account ID</th>
                         <th onClick={()=>sorting("role")}className={styles.container}>Role</th>
                         <th onClick={()=>sorting("first_name")}className={styles.container}>First Name</th>
                         <th onClick={()=>sorting("last_name")}className={styles.container}>Last Name</th>
                         <th onClick={()=>sorting("username")}className={styles.container}>UserName</th>
                         <th onClick={()=>sorting("password")}className={styles.container}>Password</th>
                         <th onClick={()=>sorting("email_address")}className={styles.container}>Email</th>
                        <th onClick={()=>sorting("account_status")}className={styles.container}>Account Status</th>
                     </tr>
                  </thead>


  {dataResponse.filter(account => {
    if (query === '') {
      return account;
    } 
    if (account.role.toLowerCase().includes(query.toLowerCase())) {
      return account;
    }
    if (account.first_name.toLowerCase().includes(query.toLowerCase())) {
      return account;
    }
    if (account.last_name.toLowerCase().includes(query.toLowerCase())) {
      return account;
    }
    if (account.username.toString().includes(query.toLowerCase())) {
      return account;
    }
    if (account.password.toString().includes(query.toLowerCase())) {
      return account;
    }
    if (account.account_id.toString().includes(query.toLowerCase())) {
      return account;
    }
    if (account.email_address.toString().includes(query.toLowerCase())) {
      return account;
    }
    if (account.account_status.toLowerCase().includes(query.toLowerCase())) {
      return account;
    }
    }).map((account) => {
  return (
    <tbody key={account.account_id}>
  <tr className={styles.tableRow}>
<td className={styles.tableData}>{account.account_id}</td>
<td className={styles.tableData}>{account.role}</td>
<td className={styles.tableData}>{account.first_name}</td>
<td className={styles.tableData}>{account.last_name}</td>
<td className={styles.tableData}>{account.username}</td>
<td className={styles.tableData}>{account.password}</td>
<td className={styles.tableData}>{account.email_address}</td>
<td className={styles.tableData}>{account.account_status}</td>
</tr>
</tbody>
);
                    })}
                </table>
            </main>
        </div>
    )
}
    
export default AdministratorAccount;
